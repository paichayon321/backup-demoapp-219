import java.text.SimpleDateFormat
import java.lang.String
def version, mvnCmd = "mvn -s configuration/cicd-settings-nexus3.xml"
//Deployment Env Initial
def containerURL="https://console.180.222.156.219.xip.io:8443"
def ocCredId="democicd_openshift"

//# If use image from private registry --> Set as below
def dockerRepoURL="harbor.180.222.156.220.xip.io"
def dockerLoginURL="harbor.180.222.156.220.xip.io"
def dockerRepo="demo"
def dockerCredId="democicd-harbor"

//# If use image from docker hub --> Set as below
//def dockerRepoURL="docker.io"
//def dockerLoginURL="docker.io"
//def dockerRepo="paichayon"
//def dockerCredId="paichayon_docker"
//################################################

def devenv="demodev"
def uatenv="demouat"
def prodenv="demoprod"

//Notify Initial
def maildevteam='paichayon.t@g-able.com'
def mailappsecteam='paichayon.t@g-able.com'
def mailtestteam='paichayon.t@g-able.com'
def mailopsteam='paichayon.t@g-able.com'
def mailinfrasecteam='paichayon.t@g-able.com'
//## Backup
def linemicroservice='84yF0i4UySrvuYyi5Pbe3BiEzsjycsozmOJnGZn5N1v'
def linecicdnotify='P83FqsGYM5rrqvsrkRFK0DTjtKqIQyk8KK03cPTdvjq'
def linedev='ZlJDUkyCdPiu1AaP9MvM4Is25gjwcdxcui1qhfK5h2l'
def linesec='eQJrm82llRfZOKAKX8pREOalVkcNv5PbFkxedyeH9ZX'
def linetester='BrbGsmgX1VX9HCZyauz7eSRsKTOoUxoHNNo2Jt5wac2'
def lineoper='W4i7nyPT4IG81IbY68gwr3v4Zbb1iFH8FDBk9GwbdU6'
//## TEST
// def linemicroservice='84yF0i4UySrvuYyi5Pbe3BiEzsjycsozmOJnGZn5N1v'
// def linecicdnotify='P83FqsGYM5rrqvsrkRFK0DTjtKqIQyk8KK03cPTdvjq'
// def linedev='P83FqsGYM5rrqvsrkRFK0DTjtKqIQyk8KK03cPTdvjq'
// def linesec='P83FqsGYM5rrqvsrkRFK0DTjtKqIQyk8KK03cPTdvjq'
// def linetester='P83FqsGYM5rrqvsrkRFK0DTjtKqIQyk8KK03cPTdvjq'
// def lineoper='P83FqsGYM5rrqvsrkRFK0DTjtKqIQyk8KK03cPTdvjq'



// Line Notify function
def notifyLINE(token, message) {
    //def isFailure = result == 'FAILURE'
    def url = 'https://notify-api.line.me/api/notify'
    //def message = "Build result is ${result}. \n${env.BUILD_URL}"
    //def imageThumbnail = isFailure ? 'FAILED_IMAGE_THUMBNAIL' : ''
    //def imageFullsize = isFailure ? 'FAILED_IMAGE_FULLSIZE' : ''
    sh "curl ${url} -H 'Authorization: Bearer ${token}' -F 'message=${message}'"
}
//


def releaseDate
def releaseTag
node {
    def dateFormat = new SimpleDateFormat("yyyyMMdd")
    def date = new Date()

    releaseDate = (dateFormat.format(date))
    releaseTag = releaseDate + "-" + env.BUILD_NUMBER
    }
    
void publishTestResults() {
    step([
            $class           : 'hudson.plugins.robot.RobotPublisher',
            outputPath       : '\\',
            passThreshold    : 100,
            unstableThreshold: 100,
            otherFiles       : '**\\*selenium*.png',
            reportFileName   : '**\\*report*.html',
            logFileName      : '**\\*log*.html',
            outputFileName   : '**\\*output*.xml'
    ])
}
pipeline {
  agent {
      label 'maven-docker'
  }
//  agent any
  stages{
    stage('BuildApp') {
      steps {
        script {
          echo "Now Perform Build Steps"
          git branch: 'master', url: 'http://gogs:3000/democicd/demoapp.git'
          script {
            def pom = readMavenPom file: 'pom.xml'
            version = pom.version
          }
          sh "mvn clean package -DskipTests"
          message = "\nJob: ${env.JOB_NAME} \nStage BuildApp is Success.\nSee more detail at \n${env.BUILD_URL}console"
          notifyLINE("${linecicdnotify}", "${message}")
          notifyLINE("${linedev}", "${message}")
        }
      }
    }
    stage('UniTest') {
      steps {
        script {
          echo "Now Perform UniTest Steps"
          sh "mvn test"
          step([$class: 'JUnitResultArchiver', testResults: '**/target/surefire-reports/TEST-*.xml'])
          message = "\nJob: ${env.JOB_NAME} \nStage UniTest is Success. \nSee Report at \n${env.BUILD_URL}testReport/"
          notifyLINE("${linecicdnotify}", "${message}")
          notifyLINE("${linedev}", "${message}")
          //build 'archive'
        }    
      }
    }
    stage('CodeAnalysis') {
      steps {
        script {
          echo "Now Perform Code Analysis Steps"
          sh "mvn sonar:sonar -Dsonar.host.url=http://sonarqube:9000 -DskipTests=true"
          message = "\nJob: ${env.JOB_NAME} \nStage CodeAnalysis is Success. \nSee Report at \nhttp://sonarqube-demotools.apps.180.222.156.219.xip.io/dashboard?id=demo.web:demo.web"
          notifyLINE("${linecicdnotify}", "${message}")
          notifyLINE("${linesec}", "${message}")
        }
      }
    }
    stage('Build Image') {
      steps {
        script {
          echo "Now Perform Build Docker Image Steps" 
          withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: "${dockerCredId}",
            usernameVariable: 'Docker_User', passwordVariable: 'Docker_Password']]) {
            sh "echo Username=$Docker_User UserPwd=$Docker_Password URL=${dockerLoginURL}"
            sh "set +x && docker login ${dockerLoginURL} -u $Docker_User -p $Docker_Password "
          }
          sh "docker build -t ${dockerRepoURL}/${dockerRepo}/demoapp:devlatest ."
          sh "docker push ${dockerRepoURL}/${dockerRepo}/demoapp:devlatest"
          message = "\nJob: ${env.JOB_NAME} \nStage Build Image is Success. \nSee Image and Scan Result at \nhttps://${dockerRepoURL}/harbor/projects/2/repositories/demo%2Fdemoapp/tags/devlatest"
          notifyLINE("${linecicdnotify}", "${message}")
          notifyLINE("${linesec}", "${message}")
        }
      }
    }
    stage('Deploy DEV') {
      steps {
        script {
          echo "Now Perform Deploy DEV Steps"  
          withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: "${ocCredId}",
            usernameVariable: 'oc_User', passwordVariable: 'oc_Password']]) {
            sh "set +x && echo Username=$oc_User UserPwd=$oc_Password URL=${containerURL}"
            sh "set +x && oc login ${containerURL} -u $oc_User -p $oc_Password --insecure-skip-tls-verify"
          }
          sh "oc project ${devenv}"
          sh "oc delete all -l app=demoapp -n ${devenv}"
          // sh "oc new-app ${dockerRepoURL}/${dockerRepo}/demoapp:devlatest -n ${devenv}"
          sleep 10
          sh "oc new-app --insecure-registry ${dockerRepoURL}/${dockerRepo}/demoapp:devlatest -n ${devenv}" 
          sh "oc set probe dc/demoapp --readiness --get-url=http://:8080/demo --initial-delay-seconds=30 --failure-threshold=10 --period-seconds=10"
          sh "oc set probe dc/demoapp --liveness  --get-url=http://:8080/demo --initial-delay-seconds=180 --failure-threshold=10 --period-seconds=10"
          //sh "oc expose svc/demoapp  --path=/demo -n ${devenv}"
          //**************Wait for replica up *********
          repset=0
          repava=1
          while (repset != repava) {
            sleep 10
            repset=sh (returnStdout: true, script: """kubectl get deploymentconfig demoapp -n ${devenv} -o jsonpath='{..replicas}'""")
            repava=sh (returnStdout: true, script: """kubectl get deploymentconfig demoapp -n ${devenv} -o jsonpath='{..availableReplicas}'""")
            repset=repset.substring(0,1)
            echo "replicas = ***${repset}***"
            echo "availableReplicas = ***${repava}***"  
          }
          //*******************************************
          sh "oc create route edge --service=demoapp --path=/demo --insecure-policy=Redirect -n ${devenv}"
          message = "\nJob: ${env.JOB_NAME} \nStage Deploy DEV is Success. \nSee Try to test your app at \nhttps://demoapp-${devenv}.apps.180.222.156.219.xip.io/demo/"
          notifyLINE("${linecicdnotify}", "${message}")
          notifyLINE("${linedev}", "${message}")
          notifyLINE("${linetester}", "${message}")
        }
      }
    }
    stage('IntegrationTest') {
      steps {
        script {
          echo "Now Perform Integration Test Steps" 
          // build 'build-docker-harbor'
          //build 'build-docker-harbor-101'
          sleep 10
          sh "robot -c critical ./atdd/robot-okd-selenium.robot"
          publishTestResults()
          message = "\nJob: ${env.JOB_NAME} \nStage Integration test is done. \nSee test result at  \n${env.BUILD_URL}robot/"
          notifyLINE("${linecicdnotify}", "${message}")
          notifyLINE("${linetester}", "${message}")
        }
      }
    }
    stage('Deploy UAT') {
      steps {
        timeout(time:600, unit:'MINUTES') {
            //input message: "Release version ${releaseTag} to UAT?", ok: "Approve"
            script {
              message = "\nJob: ${env.JOB_NAME} \nWait for Approve Deploy release version ${releaseTag} to UAT. \nDo action at \n${env.BUILD_URL}input/"
              notifyLINE("${linecicdnotify}", "${message}")
              notifyLINE("${linetester}", "${message}")
              notifyLINE("${lineoper}", "${message}")
              env.Reason = input message: "Release version ${releaseTag} to UAT?", ok: 'OK',
              submitterParameter: 'submitter',
              parameters: [choice(name: 'Reason', choices: "Approve\nAbort with Security concern\nAbort with Unit test fail\nAbort with Integration test fail\nAbort with UAT environment not Ready\nPipeline testing", description: 'What is the reason?'),booleanParam(name: 'approve', defaultValue: false, description: 'Check for Approve')]
            }
            echo '***' + env.Reason.indexOf('true')
            script {
              if (env.Reason.indexOf('true')==-1){
                  echo "Not Approve"
                  message = "\nJob: ${env.JOB_NAME} \nStage Deploy UAT Release version ${releaseTag} is NOT APPROVE by ${env.Reason}. \nSee more detail at\n${env.BUILD_URL}"
                  notifyLINE("${linecicdnotify}", "${message}")
                  notifyLINE("${linetester}", "${message}")
                  notifyLINE("${lineoper}", "${message}")
              } else {
                  echo "Approve Release version ${releaseTag} and Do deploy"
                  sh "docker pull ${dockerRepoURL}/${dockerRepo}/demoapp:devlatest"
                  sh "docker tag ${dockerRepoURL}/${dockerRepo}/demoapp:devlatest ${dockerRepoURL}/${dockerRepo}/demoapp:${releaseTag}"
                  sh "docker push ${dockerRepoURL}/${dockerRepo}/demoapp:${releaseTag}"
                  withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: "${ocCredId}",
                  usernameVariable: 'oc_User', passwordVariable: 'oc_Password']]) {
                  sh "set +x && echo Username=$oc_User UserPwd=$oc_Password URL=${containerURL}"
                  sh "set +x && oc login ${containerURL} -u $oc_User -p $oc_Password --insecure-skip-tls-verify"
                  }                  
                  sh "oc project ${uatenv}"
                  sh "oc delete all -l app=demoapp -n ${uatenv}"
                  sleep 5                
                  //sh "oc new-app ${dockerRepoURL}/${dockerRepo}/demoapp:${releaseTag} -n ${uatenv}"
                  sh "oc new-app --insecure-registry ${dockerRepoURL}/${dockerRepo}/demoapp:${releaseTag} -n ${uatenv}" 
                  sh "oc set probe dc/demoapp --readiness --get-url=http://:8080/demo --initial-delay-seconds=30 --failure-threshold=10 --period-seconds=10"
                  sh "oc set probe dc/demoapp --liveness  --get-url=http://:8080/demo --initial-delay-seconds=180 --failure-threshold=10 --period-seconds=10"
                  //sh "oc expose svc/demoapp  --path=/demo -n ${uatenv}"
                  //**************Wait for replica up *********
                  repset=0
                  repava=1
                  while (repset != repava) {
                    sleep 10
                    repset=sh (returnStdout: true, script: """kubectl get deploymentconfig demoapp -n ${uatenv} -o jsonpath='{..replicas}'""")
                    repava=sh (returnStdout: true, script: """kubectl get deploymentconfig demoapp -n ${uatenv} -o jsonpath='{..availableReplicas}'""")
                    repset=repset.substring(0,1)
                    echo "replicas = ***${repset}***"
                    echo "availableReplicas = ***${repava}***"  
                  }
                  //*******************************************
                  sh "oc create route edge --service=demoapp --path=/demo --insecure-policy=Redirect -n ${uatenv}"
                  message = "\nJob: ${env.JOB_NAME} \nStage Deploy UAT Release version ${releaseTag} is APPROVE by ${env.Reason} and deploy success \nSee Try to test your app at \nhttps://demoapp-${uatenv}.apps.180.222.156.219.xip.io/demo/"
                  notifyLINE("${linecicdnotify}", "${message}")
                  notifyLINE("${linetester}", "${message}")
                  notifyLINE("${lineoper}", "${message}")
              }
            }
        }
      }
    }
  }
  post {
    failure {
        script {
          message = "\nJob: ${env.JOB_NAME} \nRESULT: FAILURE \nSee more at ${env.BUILD_URL}console"
          notifyLINE("${linecicdnotify}", "${message}")  
          notifyLINE("${linetester}", "${message}")
          notifyLINE("${lineoper}", "${message}")
          notifyLINE("${linedev}", "${message}")
        }
    }
    aborted {
        script {
          message = "\nJob: ${env.JOB_NAME} \nRESULT: ABORTED \nSee more at ${env.BUILD_URL}console"
          notifyLINE("${linecicdnotify}", "${message}")  
          notifyLINE("${linetester}", "${message}")
          notifyLINE("${lineoper}", "${message}")
          notifyLINE("${linedev}", "${message}")
        }
    }
    success {
        script {
          message = "\nJob: ${env.JOB_NAME} \nRESULT: SUCCESS \nReason is ${env.Reason} \nSee more at ${env.BUILD_URL}console"
          notifyLINE("${linecicdnotify}", "${message}")  
          notifyLINE("${linetester}", "${message}")
          notifyLINE("${lineoper}", "${message}")
          notifyLINE("${linedev}", "${message}")
        }
    }
  }
}
